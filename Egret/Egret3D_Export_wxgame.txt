# Egret3D引擎 导出工程到微信小游戏

一、 过程：
	1. 打开Node.js 的 Command Prompt 窗口 
	2. 进入对应的工程目录
	3. 输入命令行： egret publish --target wxgame
	在工程同一级目录下生成对应工程名字且以_wxgame结尾的文件夹微信开发的工程文件夹
	
	在 内核库 文件下 我的：D:\Egret\egret-core-5.3.x\tools\tasks\compile.ts 和 compile.js
	
	添加：
	{
	compilerOptions.outFile = outfile;
    compilerOptions.allowUnreachableCode = true;
    compilerOptions.emitReflection = true;
    compilerOptions.defines = defines;
	compilerOptions.module = 4; //主要地方
	}
	
二、 微信开发工具整理Error
	
	1. 删除 main.js 中的 window.main = main
	
	2. 从浏览器保存一份 main.bundle.js 文件 放到 js 文件夹下，并在manifest.js 中引用, 并在main函数下面 加上window.main = main, 
	
	3. 修改 main.bundle.js 中main函数内的 RES 获取资源的文件夹路径‘Asset’ 改成 ‘Assets’ 和 工程文件夹名称路径保持一致
	
	
	4. 观察 game.js 修改： 如果不一致 或者报错 修改
		egret3d.runEgret({
		  contentWidth:window.innerWidth*2,
		  contentHeight:window.innerHeight*2,
		  antialias:true,
		  alpha:false,
		  gammaInput:false,
		  antialiasSamples:4,

		});
		

三、 微信resource文件夹拆包
	1. 微信暂时支持小于4M的游戏码包， 大于4M的游戏包，需要上传资源到腾讯云CDN中
	
	2. 配置Egret3D 微信小游戏开发工程
		a. 配置文件 config.wxgame.ts 
		先定义变量： const remoteDir = `../${projectName}_wxgame_remote_4`;
		在 else if (command === 'publish') {
            // TODO 合并操作应该在 publish 而不是 bake
            return {
                outputDir,
                commands: [
				//添加的内容
                    new ResSplitPlugin({
                        matchers:[
                            {from:"resource/2d/**/*.sheet",to:remoteDir},
                            {from:"!resource/2d/**",to:remoteDir},
                            // {from:"resource/Assets/**/*.scene.json",to:outputDir},
                            // {from:"resource/2d/**",to:outputDir},
                            // {from:"resource/Assets/**/*.+(scene|image).json",to:`../${projectName}_wxgame`},
                            // {from:"resource/**",to:`../${projectName}_wxgame_remote_1`},
                        ]
                    }),
                    new OnelineJson(),
		b. 修改文件 api.d.ts 文件：
		/**
	   * 匹配机制，将满足 from 的文件输出为 to 格式的文件
	   * from 采用 glob 表达式 , to 包含 [path][name][hash][ext]四个变量
	   * 示例：{ from:"resource/**.*" , to:"[path][name]_[hash].[ext]" }
	   */
		type Matcher = {
			// 使from 支持 string 类型
			from: string[]|string,

			to: string

		}
		
		c. 修改 myplugin.ts 文件：
		添加  (暂时不知道干啥用 先加上去)
		export class CheckFileExistPlugin implements plugins.Command 
		{
			async onFile(file:plugins.File) 
			{
				if(file.origin.indexOf('mergeJson') > 0) 
				{
					console.log('hjl.debug => mergeJson ',file.origin);
				}
				return file;
			}
			async onFinish(commandContext:plugins.CommandContext) 
			{

			}
		}

		export class OnelineJson implements plugins.Command 
		{
			async onFile(file:plugins.File) 
			{
				if(file.extname === '.json') 
				{
					file.contents = new Buffer(JSON.stringify(JSON.parse(file.contents.toString())));
				}
				return file;
			}
			async onFinish(commandContext:plugins.CommandContext) 
			{

			}
		}
		
		d. 修改 Main.ts 文件：
		修改函数 main() 
		//修改resource资源加载地址
		//const remoteDir:string = "";
		//await RES.loadConfig("resource/default.res.json", remoteDir);
		执行这一步目的： 将default.res.json 内的文件路径都会指向 remoteDir 地址下的文件（简单讲就是拼接资源获取的 url）
 

