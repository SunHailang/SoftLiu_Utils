#  Unity3D  接入流程

创建 监听 系统

//  Fetch DNA app keys
string dnaAppID = GetAppKeyDNA();
string dnaBuildID = Globals.GetApplicationVersion();

bool purgeOldCacheData = false;
if (m_analyticsSave != null && m_analyticsSave.sessionCount == 1 && AgeGatePrivacyController.IsUserProtectedByCOPPA())
{
	AnalyticsLogger.Log("Purging player data");
	purgeOldCacheData = true;
}
//  Init factory
DNAFactory.Instance.Init(dnaAppID, dnaBuildID);
AnalyticsProviderDNA dnaProvider = DNAFactory.Instance.CreateAnalyticsProvider(purgeOldCacheData);
HSXAnalyticsProviderDNA hsxDnaProvider = new HSXAnalyticsProviderDNA(dnaProvider, m_analyticsSave);
m_initParams.providers.Add(hsxDnaProvider);


一、
DNAFactory 用于创建 DnaToolkitUtil 对象 并传入 参数

二、
DnaToolkitUtil  包含所有 UbiServices 的配置

函数 OnNetworkAndCountryInitialized_ConfigureSDK_FGOL 函数配置  DNA 信息

public void Send(string name, Dictionary<string, object> optParams){}
这个函数用于发送事件给 UbiServices

三、
AnalyticsProviderDNA 文件  用于初始化事件系统， 操作对 DnaToolkitUtil 对象的调用

四、
HSXAnalyticsProviderDNA 文件 用于记录所有的要发送的事件名称
public override void InitAnalyticsProvider(AnalyticsInitialisationParams initParams) 用于注册和事件 ， 
private void SendEvent_FGOL(Enum eventID, Dictionary<string, object> optParams) 发送事件


发送事件模板：

public void CurrencyEarned(string source, string sourceDetails, string currency, int amount, int balance = 0)
{

	Dictionary<string, object> optParams = new Dictionary<string, object>();
	optParams.Add("Shark", value1);
	optParams.Add("SharkLevel", value2);
	optParams.Add("Source", value3);
	optParams.Add("SourceDetails", value4);
	optParams.Add("Currency", value5);
	optParams.Add("Amount", value6);
	optParams.Add("Balance", value7);

	TriggerEvent(HSXAnalyticsEventEconomies.Source, optParams);
}





